/*! \mainpage Extendable Translating Instruction Set Simulator (ETISS)
 
 
 \tableofcontents
 
 
\section Introduction
 
 	ETISS is an instruction set simulator that translates instructions into C code, appends translated instructions into a block and compiles/executes that block at runtime.
 	Instruction translation is done by an etiss::CPUArch implementation. etiss::TranslationPlugin allows to add additional code to a translated instruction (e.g. etiss::plugin::gdb::Server adds code for debugging).The CPUArch provides a cpu structure and access functions.
 	etiss::JIT instances handle compilation and loading of the translated instruction. etiss::CPUCore manages these objects and executes a cpu
 	
 
\section install Installation
 	
 	This section assumes that ETISS is not precompiled. The described methods assume a common linux system and have been tested on ubuntu 12.04 with gcc 4.6.3. Used paths are usually relative.
 	
 	Due to the restrictions of gcc 4.6.3 not all features of c++11 are used and the makefiles (\ref makefile_main "Makefile", systemc/Makefile, SW/Makefile, ArchImpl/OR1K/Makefile,JITImpl/GCC/Makefile,JITImpl/LLVM/Makefile) use the "-std=c++0x" compiler flag.
 	
 	
\subsection install1 Required Files and Folder Structure
   	
   	The toplevel folder of ETISS (e.g. ./ETISS/trunk) (in the following refered to as "path/to/ETISS" ) should contain the following file/folders:
   	<pre>
   		
   		\ref folder_include_etiss "include/etiss/"			C++ header files of ETISS 
   		\ref folder_include_c_etiss "include_c/etiss/"		C compatible header files for ETISS and translation 
		\ref folder_src "src/"				C++ source files of ETISS 
		\ref folder_systemc "systemc/"			systemc example using ETISS and TLM 
		\ref folder_ArchImpl "ArchImpl/"			etiss::CPUArch implementations should be located here (included: \ref folder_ArchImpl_OR1K "OR1K" ) 
		\ref folder_JITImpl "JITImpl/"			etiss::JIT implementations should be located here (included: \ref folder_JITImpl_GCC "GCC", \ref folder_JITImpl_LLVM "LLVM" )
        \ref folder_JITImpl "PluginImpl/"			etiss::Plugin implementations should be located here 

		CMakeLists.txt					main CMakeLists file. It builds ETISS and any project located in the ArchImpl,JITImpl,PluginImpl,projects sub folders if they also have a CMakeLists.txt.
	Deprecated: 	
   		\ref makefile_main "Makefile"			main makefile
   		
	</pre>

\subsection install2 Compile ETISS with ArchImpl and JITImpl sub projects
	
	ETISS itself has only standard depencencies like <stdint.h> or <dlsym.h> and dosn't require external tools beyond those of a default c++ environment.
	
	Therefore ETISS is supposed to compile out of the box.

	The provided CPUArch implementation for the OR1K architecture and the JIT implementation that uses GCC (assuming gcc is installed) should also need no adaption.
	
	The Clang/LLVM based jit implementation located in JITImpl/LLVM requires a prebuild version of Clang/LLVM (tested with version 3.4). It uses a Makefile that is run by a CMakeLists.txt. 
	If Clang/LLVM is installed on your system then change the variable LLVMINSTALLED to 1 in the  JITImpl/LLVM/Makefile .Otherwise the path variables in JITImpl/LLVM/Makefile need to be edited:
	
	<pre>
		LLVMINSTALLED?=0
		
		ifeq (\$(LLVMINSTALLED),0)<b>
			LLVMTOOLDIR?=/usr/local/research/projects/SystemDesign/tools/llvm
			LLVMVERSION?=3.4.2
			LLVMPATH=\$(LLVMTOOLDIR)/$(LLVMVERSION)
			LLVMPATH_BIN=\$(LLVMPATH)/bin
			LLVMPATH_LIB=\$(LLVMPATH)/lib
			LLVMPATH_INCLUDE=\$(LLVMPATH)/include
			CLANG_HEADERS=$(realpath \$(LLVMPATH_LIB)/clang/\$(LLVMVERSION)/include)</b>
		else
			LLVMVERSION?=\$(shell llvm-config --version)
			LLVMPATH_BIN=\$(shell llvm-config --bindir)
			LLVMPATH_LIB=\$(shell llvm-config --libdir)
			LLVMPATH_INCLUDE=\$(shell llvm-config --includedir)
			CLANG_HEADERS=$(realpath \$(LLVMPATH_LIB)/clang/\$(LLVMVERSION)/include)
		endif
		
		[...]
	</pre>
	
	
	The provided example software located in SW/ requires a gnu tool chain for the or1k architecture. SW/Makefile may need to be edited to match the location and tool names:
	
	<pre>
		<b>
		TOOLBIN=/usr/local/research/projects/SystemDesign/tools/openrisc/gcc-or1k-elf-4.8.1-x86_64/bin
		</b>
		[...] 
		<b>
		OR32CC=PATH=\$(TOOLBIN):\$(PATH) LD_LIBRARY_PATH=\$(TOOLBIN)/../x86_64-unknown-linux-gnu/or1k-elf/lib:\$(LD_LIBRARY_PATH) \$(TOOLBIN)/or1k-elf-gcc -std=c99 \$(FLOATTYPE)
		OR32OBJCPY=PATH=\$(TOOLBIN):\$(PATH) LD_LIBRARY_PATH=\$(TOOLBIN)/../x86_64-unknown-linux-gnu/or1k-elf/lib:\$(LD_LIBRARY_PATH) \$(TOOLBIN)/or1k-elf-objcopy
		OR32OBJDMP=PATH=\$(TOOLBIN):\$(PATH) LD_LIBRARY_PATH=\$(TOOLBIN)/../x86_64-unknown-linux-gnu/or1k-elf/lib:\$(LD_LIBRARY_PATH) \$(TOOLBIN)/or1k-elf-objdump
		OR32RDELF=PATH=\$(TOOLBIN):\$(PATH) LD_LIBRARY_PATH=\$(TOOLBIN)/../x86_64-unknown-linux-gnu/or1k-elf/lib:\$(LD_LIBRARY_PATH) \$(TOOLBIN)/or1k-elf-readelf
		OR32GDB=PATH=\$(TOOLBIN):\$(PATH) LD_LIBRARY_PATH=\$(TOOLBIN)/../x86_64-unknown-linux-gnu/or1k-elf/lib:\$(LD_LIBRARY_PATH) \$(TOOLBIN)/or1k-elf-gdb
		</b>
		[...]
		
	</pre>

	The software is not build by ETISS cmake base build system. $make has to be run in the SW/ folder and the path to the image file has to be edited e.g. in main.cpp of ETISS's example program.
	
	The SystemC example project also relies on a Makefile and is not build by the cmake build system

	To build ETISS create a new directory (e.g. install) and open a terminal in that folder. Please not that due to the legacy makefile based build system it is not recommended to use folders called "build" or "tmp" within the ETISS folders. 
	To install ETISS into standard folders, run the following commands in opened terminal:
	<pre>
	$ mkdir install
	$ cd install
	$ cmake ..
	$ make
	$ make install
	</pre>
	Above command will detect the default build system on the current host and generate neccessary files (e.g. Makefiles for Unix systems). For further option please have a look at the CMakeLists.txt in the ETISS root folder. The comment section at the beginning of the file contains a table with variables and options. 
	Because no install folder was given, the default install folder for programs is used. This will likely require administrator rights for $ make install. A possible and recommended cmake command with additional options is:
	<pre>
	$ mkdir install
	$ cd install
	$ cmake -DCMAKE_BUILD_TYPE=Debug -DETISS_BUILD_MANUAL_DOC=ON -DETISS_USE_PYTHON=OFF -DCMAKE_INSTALL_PREFIX:PATH=`pwd`/installed --graphviz=test.dot -G "CodeBlocks - Unix Makefiles" ../
	$ make
	$ make doc
	$ make install
	</pre>
	That command will configure ETISS to build in debug mode.It will prevent the documentation to be created upon running the "all" target of the generated makefile (requires building of the target doc to get and install the documentation).Python support is disabled (if enabled, a python console can be opened after loading of etiss by passing -fpyconsole) and the target folder for installation (makefile target install) is set to the folder "installed" located in the current directory.
	"--graphviz=test.dot" creates a dot file that shows dependencies and targets of the ETISS cmake project. "-G 'CodeBlocks - Unix Makefiles'" generates makefiles and a project file for the codeblocks IDE.
    The make command will then build ETISS and plugins. $ make install installs etiss into the target folder.
    

	Please refer to \ref source_install "Install ETISS uncompiled with Sources" for and alternative build system targeted at Windows hosts.
		
\section create1 Create a project

	This documentation is targeted at projects that use ETISS, not projects that primarily aiming to extend ETISS.
	Refer to \ref howto_etiss for a guide to the frontend api and use of ETISS. \ref hstructure "Highlevel structure of ETISS" shows the general structure of ETISS including the frontend api.
	
\section create2 Create a library for etiss
    
    ETISS can be extended with plugins. The tree classes etiss::CPUArch,etiss::JIT and etiss::Plugin are the main classes for extension. etiss::CPUArch implements instruction translation, etiss::JIT handles compiling/linking of genereated C code and etiss::Plugin is the base plugin class that is inherited by the 5 plugin types etiss::InterruptListenerPlugin,etiss::TranslationPlugin,etiss::CoroutinePlugin,etiss::SystemWrapperPlugin and etiss::RegisterDevicePlugin. etiss::CPUArch inherites the etiss::TranslationPlugin.
    Implementing that interface is sufficient in case of etiss::JIT and etiss::Plugin (+ child classes) to use them by adding them to a CPUCore with etiss::CPUCore::set() and etiss::CPUCore::addPlugin().
    
	For detailed implementation guides for etiss::CPUArch,etiss::JIT and etiss::Plugin refer to the respective guides:
	<pre>
		\ref howto_cpuarch 
		\ref howto_jit 
		\ref howto_plugin 
	</pre>
    
	To create a library for ETISS that provides etiss::CPUArch, etiss::JIT or etiss::Plugin implementations also refer to \ref folder_include_etiss_helper "include/etiss/helper/"
	
	The following two images show how plugins interact with the etiss::CPUCore::execute() function that is the primary simulation loop of any processor.
	
	Flow chart for the execution of the primary simulation loop in etiss::CPUCore::execute() together with plugins.
	\image html "doc_cpucore.png"
	
	Flow chart of the translation phase. An etiss::CPUArch implementation is responsible for handeling of endiannes and determining of instruction length.
	\image html "instruction_read.png" 
	
	
\section hstructure Highlevel structure of ETISS


	\image html "Structure Overview.png"

	
\section MMU

	ETISS version 0.1 doesn't provide a MMU with its example OR1K implementation. For further information please refer to the \ref mmu_concepts "MMU Concepts" page.
 
 */
