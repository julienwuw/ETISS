#ifndef TRACEABLEFIELDDEF_H_INCLUDED
#define TRACEABLEFIELDDEF_H_INCLUDED

#include <cstdint>

/// if 1 then write accesses will be logged by calling
#define TF_TRACE_WRITE 1

/// if 1 then error tracing is enabled
#define TF_TRACE_ERROR 1

/// if 1 then the undefined flag for errval and val are available
#define TF_TRACE_UNDEFINED 1

/// if 1 then any Traceable field instance will register itself in TraceableFieldBase::instances_ if TraceableFieldBase::instances_register_ is true
#define TF_REGISTER_ALL 1

#define TF_TRACE_UNDEFINED_LOGIC 0

#define TF_ETISS_VCD 1

/// if 1 the a simple heuristic value is calculated that indicated dependency on an initial state and values not supplied from external interfaces
#define TF_HEUR_DI1 1

#include <type_traits>

///evaluats to true if CLASS is a TraceableField
#define TF_isTraceableField(CLASS) std::is_base_of<tf::TraceableFieldBase,typename std::remove_reference<CLASS>::type>::value
///evaluats to true if CLASS and CLASS2 are a TraceableField
#define TF_isTraceableField2(CLASS,CLASS2) (TF_isTraceableField(CLASS) && TF_isTraceableField(CLASS2))

namespace tf
{
class TraceableFieldBase;
}
template <typename T,typename = typename std::enable_if<!TF_isTraceableField(T), T>::type>
class TraceableField;

// asTraceableField, breakPointFunc()
namespace tf
{

template <typename T>
typename std::enable_if<TF_isTraceableField(T),const T &>::type asTraceableField(const T & t)
{
    return t;
}

template <typename T>
typename std::enable_if<!TF_isTraceableField(T),TraceableField<T> >::type asTraceableField(const T & t)
{
    return TraceableField<T>(t);
}

inline void breakPointFunc() {}

}

namespace tf
{
namespace flags
{

static const uint32_t ALWAYSDEFINED = 1<<0;
static const uint32_t VALISERRVAL = 1<<1;
static const uint32_t UNDEFINEDISERROR = 1<<2; // error occures if an undefied value is written
static const uint32_t UNDEFINEDISERROR_WEAK = 1<<3; // error occures if undefined value is read. note: handle direct access with care

static const uint32_t ISOUT = 1<<16;
static const uint32_t ISIN = 1<<17;


}
}



#endif // TRACEABLEFIELDDEF_H_INCLUDED
