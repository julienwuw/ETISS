#include "ARMv6MArch.h"

using namespace etiss ;
using namespace etiss::instr ;

ARMv6MArch::ARMv6MArch():CPUArch("ARMv6M") {}

const std::set<std::string> & ARMv6MArch::getListenerSupportedRegisters()
{
    return listenerSupportedRegisters_;
}

// etiss::Plugin * newTimer(ETISS_CPU * cpu){}
// void deleteTimer(etiss::Plugin * timer){}

ETISS_CPU * ARMv6MArch::newCPU()
{
    ETISS_CPU * ret = (ETISS_CPU *) new ARMv6M() ;
    resetCPU (ret, 0);
    return ret;
}

void ARMv6MArch::resetCPU(ETISS_CPU * cpu,etiss::uint64 * startpointer)
{
    memset (cpu, 0, sizeof(ARMv6M));
//    ((ARMv6M *) cpu )->MSP=  &((ARMv6M *) cpu)->R[13];
//    ((ARMv6M *) cpu )->PSP =  &((ARMv6M *) cpu)->R13_A ;
    if (startpointer) cpu->instructionPointer = *startpointer;
    else cpu->instructionPointer =0;//  reference to manual
    cpu->mode = 1;
}
void ARMv6MArch::deleteCPU(ETISS_CPU *cpu)
{
    delete (ARMv6M *) cpu ;
}
std::shared_ptr<etiss::VirtualStruct> ARMv6MArch::getVirtualStruct(ETISS_CPU * cpu)
{
    return etiss::VirtualStruct::allocate(cpu, [](etiss::VirtualStruct::Field*f)
    {
        delete f;
    });
}



/**
	@return 8 (jump instruction + instruction of delay slot)
*/
unsigned ARMv6MArch::getMaximumInstructionSizeInBytes()
{
    return 4;
}
/**
	@return 4
*/
unsigned ARMv6MArch::getInstructionSizeInBytes()
{
    return 4;
}
/**
	@brief required headers (OR1K.h)
*/
const std::set<std::string> & ARMv6MArch::getHeaders() const
{
    return headers_ ;
}
etiss::int32 ARMv6MArch::handleException(etiss::int32 code,ETISS_CPU * cpu)
{
    return code;    //
}


void ARMv6MArch::initCodeBlock(etiss::CodeBlock & cb) const
{
    cb.fileglobalCode().insert("#include \"Arch/ARMv6M.h\"\n");
}



etiss::instr::InstructionGroup Thumb("Thumb",16);
etiss::instr::InstructionGroup Thumb2("Thumb2",32);
etiss::instr::InstructionClass ThumbClass(1,"Thumb",16,Thumb); // since there is only one mode
etiss::instr::InstructionClass Thumb2Class(1,"Thumb2",32, Thumb2); // since there is only one mode

etiss::instr::InstructionCollection CortexM0("CortexM0",ThumbClass,Thumb2Class);

const char * registerName []= { "R0", "R1" , "R2", "R3" ,"R4", "R5","R6", "R7","R8", "R9","R10", "R11", "R12", "R13","R14", "R15" } ;


//-----------------------------------------------------------16-bit isntructions----------------------------------------------

static InstructionDefinition MOV( //----------------------------------- move instruction
    Thumb,
    "MOV",
    (uint16_t)0x4600,
    (uint16_t)0xff00,
    [] (BitArray & ba,etiss::CodeSet & cs,InstructionContext & ic) //always return bool value... bitarray contains the instrution .. 16bit
{
    static BitArrayRange rm (6,3); // ic

    static BitArrayRange rd (2,0);
    static BitArrayRange D (7,7);
    int d= (D.read(ba)<<3 )+ rd.read(ba);
    int m= rm.read(ba);

    CodePart & part = cs.append(CodePart::INITIALREQUIRED);
    part.getRegisterDependencies().add(registerName [m],32);
    part.getAffectedRegisters().add(registerName [d],32);

    part.code() = std::string( "((ARMv6M*)cpu)->R[") + toString(d) + "]= ((ARMv6M*)cpu)->R[" + toString(m) + "] ;" ;


    if ( d == 15)
    {
        CodePart & part2 = cs.append(CodePart::APPENDEDOPTIONAL);
        part2.getAffectedRegisters().add("instructionPointer",64);
        part2.code() = "cpu->instructionPointer =  ((ARMv6M*)cpu)->R[15];";
//        ic.force_block_end_ = true ;

    }


    else
    {

        CodePart & part2 = cs.append(CodePart::APPENDEDREQUIRED); // add a code container
        part2.getAffectedRegisters().add("instructionPointer",64);
        part2.code() = "cpu->instructionPointer = " +toString((uint32_t)(ic.current_address_+2))+"ULL;";

    }
    return true;
},
0, //since there is no group
nullptr     //it is a disassembler function



);

/*
static InstructionDefinition ADC (
                                  Thumb,
                                  (uint16_t)0x4160,
                                  (uint16_t)0xffc0,
                                  [] (BitArray & ba, etiss ::CodeSet & cs, InstructionContext & ic
{
    static BitArrayRange rm (5,3);
    static BitArrayRange rd (0,2);
    int d= rd.read(ba);
    int m=rm.read (ba);
    CodePart & part = cs.append (CodePart::INITIALREQUIRED);
    part.getRegisterDependencies().add(registerName [m],32);
    part.getRegisterDependencies().add(registerName [d],32);

part.code() = std :: string( "((ARMv6M*)cpu)->R[") + toString(d) + "]= ((ARMv6*)cpu->R[" +toString(m) + "] ;" ;



}
                                  ) ;

*/
//static InstructionDefinition MOVS( //----------------------------------- move instruction
//    Thumb,
//    "MOVS",
//    (uint16_t)0x4600,
//    (uint16_t)0xff00,
//    [] (BitArray & ba,etiss::CodeSet & cs,InstructionContext & ic) //always return bool value... bitarray contains the instrution .. 16bit
//{
//    static BitArrayRange rm (6,3); // ic
//
//    static BitArrayRange rd (2,0);
//    static BitArrayRange D (7,7);
//    int d= (D.read(ba)<<3 )+ rd.read(ba);
//    int m= rm.read(ba);
//
//    CodePart & part = cs.append(CodePart::INITIALREQUIRED);
//    part.getRegisterDependencies().add(registerName [m],32);
//    part.getAffectedRegisters().add(registerName [d],32);
//
//    part.code() = std::string( "((ARMv6M*)cpu)->R[") + toString(d) + "]= ((ARMv6M*)cpu)->R[" + toString(m) + "] ;" ;
//
//
//    if ( d == 15)
//    {
//        CodePart & part2 = cs.append(CodePart::APPENDEDOPTIONAL);
//        part2.getAffectedRegisters().add("instructionPointer",64);
//        part2.code() = "cpu->instructionPointer =  ((ARMv6M*)cpu)->R[15];";
//        ic.force_block_end_ = true ;
//
//    }
//
//
//    else
//    {
//
//        CodePart & part2 = cs.append(CodePart::APPENDEDOPTIONAL); // add a code container
//        part2.getAffectedRegisters().add("instructionPointer",64);
//        part2.code() = "cpu->instructionPointer = " +toString((uint32_t)(ic.current_address_+2))+"ULL;";
//
//    }
//
//
//
////--------------------------------------------------------------------------------------------------------------------------------------------
//    return true;
//},
//0, //since there is no group
//nullptr     //it is a disassembler function
//
//
//
//);




//
//static InstructionDefinition EOR( //-------------------------------------exclusive or instruction-------------- this is complete
//    Thumb,
//    "EOR",
//    (uint16_t)0x4040,
//    (uint16_t)0xffc0,
//    [] (BitArray & ba,etiss::CodeSet & cs,InstructionContext & ic) //always return bool value... bitarray contains the instrution .. 16bit
//{
//    static BitArrayRange rm (5,3); // ic
//
//    static BitArrayRange rd (2,0);
//
//    int d= rd.read(ba);
//    int m= rm.read(ba);
//
//    CodePart & part = cs.append(CodePart::INITIALREQUIRED);
//    part.getRegisterDependencies().add(registerName [m],32);
//	part.getRegisterDependencies().add(registerName [d],32);
//    part.getAffectedRegisters().add(registerName [d],32);
//
//    part.code() = std::string( "((ARMv6M*)cpu)->R[")+toString(d)+"]= ((ARMv6M*)cpu)->R["+toString(d)+"] ^ ((ARMv6M*)cpu)->R["+toString(m)+"] ;";
//
//        CodePart & part2 = cs.append(CodePart::APPENDEDOPTIONAL); // add a code container
//        part2.getAffectedRegisters().add("instructionPointer",64);
//        part2.code() = "cpu->instructionPointer = " +toString((uint32_t)(ic.current_address_+2))+"ULL;";
//
//
//    return true;
//},
//0,
//nullptr     //it is a disassembler function
//
//
//
//);
//
//
//static InstructionDefinition LSLS( //-------------------------------------Logical left shift instruction (register)-------------- this is complete
//    Thumb,
//    "LSLS",
//    (uint16_t)0x0300,
//    (uint16_t)0xf800,
//    [] (BitArray & ba,etiss::CodeSet & cs,InstructionContext & ic) //always return bool value... bitarray contains the instrution .. 16bit
//{
//    static BitArrayRange rm (4,3); // since in the shift instruction the bottonm byte decide the amount of shift
//
//    static BitArrayRange rd (2,0);
//
//    int d= rd.read(ba);
//    int m= rm.read(ba);
//
//    CodePart & part = cs.append(CodePart::INITIALREQUIRED);
//    part.getRegisterDependencies().add(registerName [m],32);
//	part.getRegisterDependencies().add(registerName [d],32);
//    part.getAffectedRegisters().add(registerName [d],32);
//
//      part.code() = std::string( "((ARMv6M*)cpu)->R[") + toString(d) + "]= ((ARMv6M*)cpu)->R[" + toString(m) + "] << m ;" ;
//
//
//        CodePart & part2 = cs.append(CodePart::APPENDEDOPTIONAL); // add a code container
//        part2.getAffectedRegisters().add("instructionPointer",64);
//        part2.code() = "cpu->instructionPointer = " +toString((uint32_t)(ic.current_address_+2))+"ULL;";
//
//
//    return true;
//},
//0,
//nullptr     //it is a disassembler function
//
//
//
//);

/*
static InstructionDefinition LSLS( //-------------------------------------Logical left shift instruction ( Immediate )--------------
    Thumb,
    "LSLS",
    (uint16_t)0x0300,
    (uint16_t)0xf800,
    [] (BitArray & ba,etiss::CodeSet & cs,InstructionContext & ic) //always return bool value... bitarray contains the instrution .. 16bit
{
    static BitArrayRange rm (4,3); // since in the shift instruction the bottonm byte decide the amount of shift

    static BitArrayRange rd (2,0);
    static BitArrayRange imme5 (6,10);


    int d= rd.read(ba);
    int m= rm.read(ba);
    int imm= imme5.read(ba);

    CodePart & part = cs.append(CodePart::INITIALREQUIRED);
    part.getRegisterDependencies().add(registerName [m],32);
	part.getRegisterDependencies().add(registerName [d],32);
    part.getAffectedRegisters().add(registerName [d],32);

      part.code() = std::string( "((ARMv6M*)cpu)->R[") + toString(d) + "]= ((ARMv6M*)cpu)->R[" + toString(m) + "] << imme ;" ;



        CodePart & part2 = cs.append(CodePart::APPENDEDOPTIONAL); // add a code container
        part2.getAffectedRegisters().add("instructionPointer",64);
        part2.code() = "cpu->instructionPointer = " +toString((uint32_t)(ic.current_address_+2))+"ULL;";


    return true;
},
0,
nullptr     //it is a disassembler function



);

*/
//static InstructionDefinition LSR( //-------------------------------------Logical left shift instruction (register)-------------- this is complete
//    Thumb,
//    "LSLS",
//    (uint16_t)0x4080,
//    (uint16_t)0xffc0,
//    [] (BitArray & ba,etiss::CodeSet & cs,InstructionContext & ic) //always return bool value... bitarray contains the instrution .. 16bit
//{
//    static BitArrayRange rm (4,3); // since in the shift instruction the bottonm byte decide the amount of shift
//
//    static BitArrayRange rd (2,0);
//
//    int d= rd.read(ba);
//    int m= rm.read(ba);
//
//    CodePart & part = cs.append(CodePart::INITIALREQUIRED);
//    part.getRegisterDependencies().add(registerName [m],32);
//	part.getRegisterDependencies().add(registerName [d],32);
//    part.getAffectedRegisters().add(registerName [d],32);
//
//      part.code() = std::string( "((ARMv6M*)cpu)->R[") + toString(d) + "]= ((ARMv6M*)cpu)->R[" + toString(m) + "] >> m ;" ;
//
//
//        CodePart & part2 = cs.append(CodePart::APPENDEDOPTIONAL); // add a code container
//        part2.getAffectedRegisters().add("instructionPointer",64);
//        part2.code() = "cpu->instructionPointer = " +toString((uint32_t)(ic.current_address_+2))+"ULL;";
//
//
//    return true;
//},
//0,
//nullptr     //it is a disassembler function
//
//
//
//);
//
//
//
//
//
//
static InstructionDefinition ORRS( //-------------------------------------OR instruction--------------
    Thumb,
    "ORRS",
    (uint16_t)0x4300,
    (uint16_t)0xffc0,
    [] (BitArray & ba,etiss::CodeSet & cs,InstructionContext & ic) //always return bool value... bitarray contains the instrution .. 16bit
{
    static BitArrayRange rm (5,3); // ic

    static BitArrayRange rd (2,0);

    int d= rd.read(ba);
    int m= rm.read(ba);

    CodePart & part = cs.append(CodePart::INITIALREQUIRED);
    part.getRegisterDependencies().add(registerName [m],32);
	part.getRegisterDependencies().add(registerName [d],32);
    part.getAffectedRegisters().add(registerName [d],32);

    part.code() = std::string( "((ARMv6M*)cpu)->R[")+toString(d)+"]= ((ARMv6M*)cpu)->R["+toString(d)+"] | ((ARMv6M*)cpu)->R["+toString(m)+"] ;";

        CodePart & part2 = cs.append(CodePart::APPENDEDOPTIONAL); // add a code container
        part2.getAffectedRegisters().add("instructionPointer",64);
        part2.code() = "cpu->instructionPointer = " +toString((uint32_t)(ic.current_address_+2))+"ULL;";


    return true;
},
0,
nullptr     //it is a disassembler function



);

//-------------------------------------------------------- thumb2 32 bits instruction--------------------------------------------------------------------

static InstructionDefinition ISB ( //--------------instruction synchronization
    Thumb2,
    "ISB",
    (uint32_t)0xf3b08060,
    (uint32_t)0xfff0d0f0,
    [] (BitArray & ba,etiss::CodeSet & cs,InstructionContext & ic) //always return bool value... bitarray contains the instrution .. 16bit
{




    CodePart & part2 = cs.append(CodePart::APPENDEDOPTIONAL); // add a code container
    part2.getAffectedRegisters().add("instructionPointer",64);
    part2.code() = "cpu->instructionPointer = " +toString((uint32_t)(ic.current_address_+4))+"ULL;";



    return true;
},
0, //since there is no group
nullptr     //it is a disassembler function

);

//static InstructionDefinition DMB ( //----------------------data memory-----------------
//    Thumb2,
//    "DMB",
//    (uint32_t)0xf3b08050,
//    (uint32_t)0xfff0d0f0,
//    [] (BitArray & ba,etiss::CodeSet & cs,InstructionContext & ic) //always return bool value... bitarray contains the instrution .. 16bit
//{
//
//
//
//
//    CodePart & part2 = cs.append(CodePart::APPENDEDOPTIONAL); // add a code container
//    part2.getAffectedRegisters().add("instructionPointer",64);
//    part2.code() = "cpu->instructionPointer = " +toString((uint32_t)(ic.current_address_+4))+"ULL;";
//
//
//
//    return true;
//},
//0, //since there is no group
//nullptr     //it is a disassembler function
//
//);
//
//
//static InstructionDefinition DSB ( //--------------------data synchronization-----------------
//    Thumb2,
//    "DSB",
//    (uint32_t)0xf3b08040,
//    (uint32_t)0xfff0d0f0,
//    [] (BitArray & ba,etiss::CodeSet & cs,InstructionContext & ic) //always return bool value... bitarray contains the instrution .. 16bit
//{
//
//
//
//
//    CodePart & part2 = cs.append(CodePart::APPENDEDOPTIONAL); // add a code container
//    part2.getAffectedRegisters().add("instructionPointer",64);
//    part2.code() = "cpu->instructionPointer = " +toString((uint32_t)(ic.current_address_+4))+"ULL;";
//
//
//
//    return true;
//},
//0, //since there is no group
//nullptr     //it is a disassembler function
//
//);


//static InstructionDefinition MRS ( //-------------------------read special register--------------------- used as mrseq
//    Thumb2,
//    "MRS",
//    (uint32_t)0xf3b08060,
//    (uint32_t)0xfff0d0f0,
//    [] (BitArray & ba,etiss::CodeSet & cs,InstructionContext & ic) //always return bool value... bitarray contains the instrution .. 16bit
//{
//
//
//
//
//    CodePart & part2 = cs.append(CodePart::APPENDEDOPTIONAL); // add a code container
//    part2.getAffectedRegisters().add("instructionPointer",64);
//    part2.code() = "cpu->instructionPointer = " +toString((uint32_t)(ic.current_address_+4))+"ULL;";
//
//
//
//    return true;
//},
//0, //since there is no group
//nullptr     //it is a disassembler function
//
//);
//
//static InstructionDefinition MSR ( //---------------------------------write special register----------------- not used much
//    Thumb2,
//    "MSR",
//    (uint32_t)0xf3b08060,
//    (uint32_t)0xfff0d0f0,
//    [] (BitArray & ba,etiss::CodeSet & cs,InstructionContext & ic) //always return bool value... bitarray contains the instrution .. 16bit
//{
//
//    CodePart & part2 = cs.append(CodePart::APPENDEDOPTIONAL); // add a code container
//    part2.getAffectedRegisters().add("instructionPointer",64);
//    part2.code() = "cpu->instructionPointer = " +toString((uint32_t)(ic.current_address_+4))+"ULL;";
//
//
//
//    return true;
//},
//0, //since there is no group
//nullptr     //it is a disassembler function
//
//);

static InstructionDefinition add_SPimm_T1(
    Thumb, // associated InstructionGroup
    "add", // name
    (uint16_t)0xa800,
    (uint16_t)0xf800,

    [](BitArray & ba,etiss::CodeSet & cs,InstructionContext & ic) // callback to translate the "add" instruction
{
    static BitArrayRange imm (7,0);
    static BitArrayRange rd (10,8);
    etiss_uint32 Im = imm.read(ba);
    etiss_int32 Imm = (etiss_int32)Im;
    etiss_uint32 d= rd.read(ba);

    CodePart & part = cs.append(CodePart::APPENDEDREQUIRED);
    part.getRegisterDependencies().add(registerName [13],32);
    part.getAffectedRegisters().add(registerName [d],32);
    part.code() = std::string("//add_SPimm_T1\n")+

    "etiss_uint32 SP = ((ARMv6M*)cpu)->R[13];\n"
    "etiss_uint32 Rd = ((ARMv6M*)cpu)->R["+toString(d)+"];\n"
    "etiss_uint8 carry_in = 0;\n"
    "etiss_int64 signed_sum = (etiss_int32)SP + "+toString(Imm)+" + carry_in;\n"
    "etiss_uint64 unsigned_sum = SP + "+toString(Im)+" + carry_in;\n"
    "etiss_uint32 unsigned_result = unsigned_sum & 0xffffffffL;\n"
    "etiss_int32 signed_result = signed_sum & 0xffffffffL;\n"
    "((ARMv6M*)cpu)->R[" + toString(d) + "]= unsigned_result;";
    CodePart & part2 = cs.append(CodePart::APPENDEDREQUIRED); // add a code container
    part2.getAffectedRegisters().add("instructionPointer",32);
    part2.code() = "cpu->instructionPointer = " +toString((uint32_t)(ic.current_address_+2))+"ULL;";

    return true;

},
0, // see etiss::instr::Instruction::BUILTINGROUP for possible value and meaning
0 // callback routing to enable printing of assembler output. optional
);
//
static InstructionDefinition add_SPimm_T2(
    Thumb,// associated InstructionGroup
    "add", // name
    (uint16_t)0xb000,
    (uint16_t)0xff80,

    [](BitArray & ba,etiss::CodeSet & cs,InstructionContext & ic) // callback to translate the "add" instruction
{
    static BitArrayRange imm (6,0);

    etiss_uint32 Im = imm.read(ba);
    etiss_int32 Imm = (etiss_int32)Im;


    CodePart & part = cs.append(CodePart::APPENDEDREQUIRED);
    part.getRegisterDependencies().add(registerName [13],32);
    part.getAffectedRegisters().add(registerName [13],32);
    part.code() = std::string("//add_SPimm_T2\n")+
    "etiss_uint32 SP = ((ARMv6M*)cpu)->R[13];\n"
    "etiss_uint8 carry_in = 0;\n"
    "etiss_int64 signed_sum = (etiss_int32)SP + "+ toString(Imm) + "+ carry_in;\n"
    "etiss_uint64 unsigned_sum = SP + "+ toString(Im) + "+ carry_in;\n"
    "etiss_uint32 unsigned_result = unsigned_sum & 0xffffffffL;\n"
    "etiss_int32 signed_result = signed_sum & 0xffffffffL;\n"
    "((ARMv6M*)cpu)->R[13]= unsigned_result; ";
    CodePart & part2 = cs.append(CodePart::APPENDEDREQUIRED); // add a code container
    part2.getAffectedRegisters().add("instructionPointer",32);
    part2.code() = "cpu->instructionPointer = " +toString((uint32_t)(ic.current_address_+2))+"ULL;";

    return true;

},
0, // see etiss::instr::Instruction::BUILTINGROUP for possible value and meaning
0 // callback routing to enable printing of assembler output. optional
);

static InstructionDefinition add_SPreg(
    Thumb,// associated InstructionGroup
    "ADD", // name
    (uint16_t)0x4400,
    (uint16_t)0xff00,

    [](BitArray & ba,etiss::CodeSet & cs,InstructionContext & ic) // callback to translate the "add" instruction
{
    static BitArrayRange rdm (2,0);
    static BitArrayRange rm (6,3);
    static BitArrayRange DM (7,7);
    int m = (DM.read(ba)<<3 ) + rdm.read(ba);
    int d = (DM.read(ba)<<3 ) + rdm.read(ba);
    int Rm = rm.read(ba);
    if(Rm == 13) {
            //encoding T1
            CodePart & part = cs.append(CodePart::APPENDEDREQUIRED);
            part.getRegisterDependencies().add(registerName [13],32);
            part.getRegisterDependencies().add(registerName [m],32);
            part.getAffectedRegisters().add(registerName [d],32);
            part.code() = std::string("//add_SPreg_T1\n")+
            "etiss_uint32 Rm = ((ARMv6M*)cpu)->R["+toString(m)+"];\n"
            "etiss_uint32 SP = ((ARMv6M*)cpu)->R[13];\n"
            "etiss_uint8 carry_in = 0;\n"
            "etiss_int64 signed_sum = (etiss_int32)SP + (etiss_int32)Rm+ carry_in;\n"
            "etiss_uint64 unsigned_sum = SP + Rm + carry_in;\n"
            "etiss_uint32 unsigned_result = unsigned_sum & 0xffffffffL;\n"
            "etiss_int32 signed_result = signed_sum & 0xffffffffL;";

         if ( d == 15)
        {

            CodePart & part = cs.append(CodePart::APPENDEDOPTIONAL);
            part.getAffectedRegisters().add("instructionPointer",32);
            part.code() = "cpu->instructionPointer = unsigned_result";
            ic.force_block_end_ = true ;

        }
        else{
            CodePart & part = cs.append(CodePart::APPENDEDOPTIONAL);
            part.getRegisterDependencies().add(registerName [13],32);
            part.getRegisterDependencies().add(registerName [m],32);
            part.getAffectedRegisters().add(registerName [d],32);
            part.code() = std::string( "((ARMv6M*)cpu)->R[") + toString(d) + "]= unsigned_result;";

            CodePart & part2 = cs.append(CodePart::APPENDEDOPTIONAL); // add a code container
            part2.getAffectedRegisters().add("instructionPointer",32);
            part2.code() = "cpu->instructionPointer = " +toString((uint32_t)(ic.current_address_+2))+"ULL;";
        }
    }else if(m == 13){
        //encoding T2
            CodePart & part = cs.append(CodePart::APPENDEDREQUIRED);
            part.getRegisterDependencies().add(registerName [13],32);
            part.getRegisterDependencies().add(registerName [Rm],32);
            part.getAffectedRegisters().add(registerName [13],32);
            part.code() = std::string( "//add_SPreg_T2\n")+
            "etiss_uint32 Rm = ((ARMv6M*)cpu)->R["+toString(Rm)+"];\n"
            "etiss_uint32 SP = ((ARMv6M*)cpu)->R[13];\n"
            "etiss_uint8 carry_in = 0;\n"
            "etiss_int64 signed_sum = (etiss_int32)SP + (etiss_int32)Rm+ carry_in;\n"
            "etiss_uint64 unsigned_sum = SP + Rm + carry_in;\n"
            "etiss_uint32 unsigned_result = unsigned_sum & 0xffffffffL;\n"
            "etiss_int32 signed_result = signed_sum & 0xffffffffL;\n"
            "((ARMv6M*)cpu)->R[13]= unsigned_result;";
            CodePart & part2 = cs.append(CodePart::APPENDEDREQUIRED); // add a code container
            part2.getAffectedRegisters().add("instructionPointer",32);
            part2.code() = "cpu->instructionPointer = " +toString((uint32_t)(ic.current_address_+2))+"ULL;";
    }

    return true;

},
0, // see etiss::instr::Instruction::BUILTINGROUP for possible value and meaning
0 // callback routing to enable printing of assembler output. optional
);

//static InstructionDefinition add_SPreg_T2(
//    Thumb,// associated InstructionGroup
//    "ADD", // name
//    (uint16_t)0x4485,
//    (uint16_t)0xfff7,
//
//    [](BitArray & ba,etiss::CodeSet & cs,InstructionContext & ic) // callback to translate the "add" instruction
//{
//
//    static BitArrayRange rm (6,3);
//
//
//    int m = rm.read(ba);
//
//
//
//
//
//    return true;
//
//},
//0, // see etiss::instr::Instruction::BUILTINGROUP for possible value and meaning
//0 // callback routing to enable printing of assembler output. optional
//);
static InstructionDefinition add_imm_T1(
    Thumb, // associated InstructionGroup
    "add", // name
    (uint16_t)0x1c00,
    (uint16_t)0xfe00,
//    parse_i32("6x38 15x0 1x0 2x0 4x0 4xe"), // opcode value
//    parse_i32("6xFF 15x0 1x0 2xF 4x0 4xF"), // mask that defines which bits make up the opcode
    [](BitArray & ba,etiss::CodeSet & cs,InstructionContext & ic) // callback to translate the "add" instruction
{
    static BitArrayRange imm (8,6);
    static BitArrayRange rd (2,0);
    static BitArrayRange rn (5,3);

    etiss_uint32 d= rd.read(ba);
    etiss_uint32 n= rn.read(ba);
    etiss_uint32 Im= imm.read(ba);
    etiss_int32 Imm = (etiss_int32) Im;

    CodePart & part = cs.append(CodePart::APPENDEDREQUIRED);
    part.getRegisterDependencies().add(registerName [n],32);
    part.getAffectedRegisters().add(registerName [d],32);
    part.code() = std::string("//add_imm_T1\n")+
    "etiss_uint32 Rd = ((ARMv6M*)cpu)->R[" + toString(d) + "];\n"
    "etiss_uint32 Rn = ((ARMv6M*)cpu)->R[" + toString(n) + "];\n"
    "etiss_uint8 carry_in = 0;\n"
    "etiss_int8 carry_out;\n"
    "etiss_int8 overflow;\n"
    "etiss_int64 signed_sum = " + toString(Imm) + " + (etiss_int32)Rn + carry_in;\n"
    "etiss_uint64 unsigned_sum = " + toString(Im) + " + Rn + carry_in;\n"
    "etiss_uint32 unsigned_result = unsigned_sum & 0xffffffffL;\n"
    "etiss_int32 signed_result = signed_sum & 0xffffffffL;\n"
    "if(unsigned_result == unsigned_sum)\n"
    "    carry_out = 0;\n"
    "else\n"
    "    carry_out = 1;\n"
    "if(signed_result == signed_sum)\n"
    "    overflow = 0;\n"
    "else\n"
    "    overflow = 1;\n"
    "etiss_int8 isZero;\n"
    "etiss_int8 negative;\n"
    "etiss_int8 flags;\n"
    "if (unsigned_result == 0)\n"
    "    isZero = 1;\n"
    "else\n"
    "    isZero = 0;\n"
    "negative =  unsigned_result >>31 & 0x1UL;\n"
    "flags =  (negative<<3) + (isZero<<2) + (carry_out<<1) + overflow;\n"
    "((ARMv6M*)cpu)->R[" + toString(d) + "]= unsigned_result;";

    CodePart & part2 = cs.append(CodePart::APPENDEDREQUIRED);
    part2.getRegisterDependencies().add("APSR",32);
    part2.getAffectedRegisters().add("APSR",32);
    part2.code() = std::string( "((ARMv6M*)cpu)-> APSR = ( ((ARMv6M*)cpu)-> APSR & 0x0FFFFFFFL ) |flags<<28;");
    CodePart & part3 = cs.append(CodePart::APPENDEDREQUIRED); // add a code container
    part3.getAffectedRegisters().add("instructionPointer",32);
    part3.code() = "cpu->instructionPointer = " +toString((uint32_t)(ic.current_address_+2))+"ULL;";


    return true;

},
0, // see etiss::instr::Instruction::BUILTINGROUP for possible value and meaning
0 // callback routing to enable printing of assembler output. optional
);
//
//static InstructionDefinition add_imm_T2(
//    Thumb, // associated InstructionGroup
//    "add", // name
//    (uint16_t)0x3000,
//    (uint16_t)0xf800,
////    parse_i32("6x38 15x0 1x0 2x0 4x0 4xe"), // opcode value
////    parse_i32("6xFF 15x0 1x0 2xF 4x0 4xF"), // mask that defines which bits make up the opcode
//    [](BitArray & ba,etiss::CodeSet & cs,InstructionContext & ic) // callback to translate the "add" instruction
//{
//    static BitArrayRange imm (7,0);
//    static BitArrayRange rd (10,8);
//    static BitArrayRange rn (10,8);
//
//    etiss_uint8 d= rd.read(ba);
//    etiss_uint8 n= rn.read(ba);
//
//    etiss_uint32 Rd = ((ARMv6M*)cpu)->R[d];
//    etiss_uint32 Rn = ((ARMv6M*)cpu)->R[n];
//    etiss_uint32 Im= imm.read(ba);
//
//    etiss_uint8 carry_in = 0;
//    etiss_int8 carry_out;
//    etiss_int8 overflow;
//    etiss_int64 signed_sum = (etiss_int32)Im + (etiss_int32)Rn + carry_in;
//    etiss_uint64 unsigned_sum = Im + Rn + carry_in;
//    etiss_uint32 unsigned_result = unsigned_sum & 0xffffffffL;
//    etiss_int32 signed_result = signed_sum & 0xffffffffL;
//    if(unsigned_result == unsigned_sum)
//        carry_out = 0;
//    else
//        carry_out = 1;
//
//    if(signed_result == signed_sum)
//        overflow = 0;
//    else
//        overflow = 1;
//
//    etiss_int8 isZero;
//    etiss_int8 negative;
//    etiss_int8 flags;
//    if (unsigned_result == 0)
//        isZero = 1;
//    else
//        isZero = 0;
//    negative =  unsigned_result & 0x80000000L >>> 31;
//    flags =  (negative<<3) + (isZero<<2) + (carry_out<<1) + overflow;
//    CodePart & part = cs.append(CodePart::OPTIONALMIDDLE);
//    part.getRegisterDependencies().add(registerName [n],32);
//    part.getAffectedRegisters().add(registerName [d],32);
//    part.code() = std::string( "((ARMv6M*)cpu)->R[") + toString(d) + "]= "+ unsigned_result + ";";
//
//    CodePart & part2 = cs.append(CodePart::OPTIONALMIDDLE);
//    part2.getRegisterDependencies().add("APSR",32);
//    part2.getAffectedRegisters().add("APSR",32);
//    part2.code() = std::string( "((ARMv6M*)cpu)-> APSR = ( ((ARMv6M*)cpu)->APSR & 0x0FFFFFFFL ) |" + (flags<<28) + ";";
//
//    CodePart & part3 = cs.append(CodePart::APPENDEDOPTIONAL); // add a code container
//    part3.getAffectedRegisters().add("instructionPointer",32);
//    part3.code() = "cpu->instructionPointer = " +toString((uint32_t)(ic.current_address_+2))+"ULL;";
//
//
//    return true;
//
//},
//0, // see etiss::instr::Instruction::BUILTINGROUP for possible value and meaning
//0 // callback routing to enable printing of assembler output. optional
//);
//
//static InstructionDefinition add_reg_T1(
//    Thumb, // associated InstructionGroup
//    "add", // name
//    (uint16_t)0x1800,
//    (uint16_t)0xfe00,
////    parse_i32("6x38 15x0 1x0 2x0 4x0 4xe"), // opcode value
////    parse_i32("6xFF 15x0 1x0 2xF 4x0 4xF"), // mask that defines which bits make up the opcode
//    [](BitArray & ba,etiss::CodeSet & cs,InstructionContext & ic) // callback to translate the "add" instruction
//{
//    static BitArrayRange rm (8,6);
//    static BitArrayRange rd (2,0);
//    static BitArrayRange rn (5,3);
//
//    etiss_uint8 d= rd.read(ba);
//    etiss_uint8 m= rm.read(ba);
//    etiss_uint8 n= rn.read(ba);
//
//    etiss_uint32 Rd = ((ARMv6M*)cpu)->R[d];
//    etiss_uint32 Rn = ((ARMv6M*)cpu)->R[n];
//    etiss_uint32 Rm = ((ARMv6M*)cpu)->R[m];
//
//    etiss_uint8 carry_in = ((ARMv6M *) cpu )->APSR & 0x20000000L >>> 29;
//    etiss_int8 carry_out;
//    etiss_int8 overflow;
//    etiss_int64 signed_sum = (etiss_int32)Rm + (etiss_int32)Rn + carry_in;
//    etiss_uint64 unsigned_sum = Rm + Rn + carry_in;
//    etiss_uint32 unsigned_result = unsigned_sum & 0xffffffffL;
//    etiss_int32 signed_result = signed_sum & 0xffffffffL;
//    if(unsigned_result == unsigned_sum)
//        carry_out = 0;
//    else
//        carry_out = 1;
//
//    if(signed_result == signed_sum)
//        overflow = 0;
//    else
//        overflow = 1;
//
//    etiss_int8 isZero;
//    etiss_int8 negative;
//    etiss_int8 flags;
//    if (unsigned_result == 0)
//        isZero = 1;
//    else
//        isZero = 0;
//    negative =  unsigned_result & 0x80000000L >>> 31;
//    flags =  (negative<<3) + (isZero<<2) + (carry_out<<1) + overflow;
//
//     if ( d == 15)
//    {
//        CodePart & part = cs.append(CodePart::APPENDEDOPTIONAL);
//        part.getAffectedRegisters().add("instructionPointer",32);
//        part.code() = "cpu->instructionPointer = "+ unsigned_result;
//        ic.force_block_end_ = true ;
//
//    }
//
//
//    else
//    {
//        CodePart & part = cs.append(CodePart::OPTIONALMIDDLE);
//        part.getRegisterDependencies().add(registerName [m],32);
//        part.getRegisterDependencies().add(registerName [n],32);
//        part.getAffectedRegisters().add(registerName [d],32);
//        part.code() = std::string( "((ARMv6M*)cpu)->R[") + toString(d) + "]= "+ unsigned_result + ";";
//        CodePart & part2 = cs.append(CodePart::OPTIONALMIDDLE);
//        part.getRegisterDependencies().add("APSR",32);
//        part.getAffectedRegisters().add("APSR",32);
//        part.code() = std::string( "((ARMv6M*)cpu)-> APSR = ( ((ARMv6M*)cpu)-> APSR & 0x0FFFFFFFL ) |" + (flags<<28) + ";";
//        CodePart & part3 = cs.append(CodePart::APPENDEDOPTIONAL); // add a code container
//        part3.getAffectedRegisters().add("instructionPointer",32);
//        part3.code() = "cpu->instructionPointer = " +toString((uint32_t)(ic.current_address_+2))+"ULL;";
//
//    }
//    return true;
//
//},
//0, // see etiss::instr::Instruction::BUILTINGROUP for possible value and meaning
//0 // callback routing to enable printing of assembler output. optional
//);
//
//static InstructionDefinition add_reg_T2(
//    Thumb, // associated InstructionGroup
//    "add", // name
//    (uint16_t)0x4400,
//    (uint16_t)0xff00,
////    parse_i32("6x38 15x0 1x0 2x0 4x0 4xe"), // opcode value
////    parse_i32("6xFF 15x0 1x0 2xF 4x0 4xF"), // mask that defines which bits make up the opcode
//    [](BitArray & ba,etiss::CodeSet & cs,InstructionContext & ic) // callback to translate the "add" instruction
//{
//    static BitArrayRange rm (6,3);
//    static BitArrayRange rd (2,0);
//    static BitArrayRange rn (2,0);
//    static BitArrayRange D (7,7);
//    etiss_uint8 d= (D.read(ba)<<3 ) + rd.read(ba);
//    etiss_uint8 m= rm.read(ba);
//    etiss_uint8 n= rn.read(ba);
//    etiss_uint32 Rd = ((ARMv6M*)cpu)->R[d];
//    etiss_uint32 Rn = ((ARMv6M*)cpu)->R[n];
//    etiss_uint32 Rm = ((ARMv6M*)cpu)->R[m];
//    etiss_uint8 carry_in = ((ARMv6M *) cpu )->APSR & 0x20000000L >>> 29;
//    etiss_int8 carry_out;
//    etiss_int8 overflow;
//    etiss_int64 signed_sum = (etiss_int32)Rm + (etiss_int32)Rn + carry_in;
//    etiss_uint64 unsigned_sum = Rm + Rn + carry_in;
//    etiss_uint32 unsigned_result = unsigned_sum & 0xffffffffL;
//    etiss_int32 signed_result = signed_sum & 0xffffffffL;
//    if(unsigned_result == unsigned_sum)
//        carry_out = 0;
//    else
//        carry_out = 1;
//
//    if(signed_result == signed_sum)
//        overflow = 0;
//    else
//        overflow = 1;
//
//    etiss_int8 isZero;
//    etiss_int8 negative;
//    etiss_int8 flags;
//    if (unsigned_result == 0)
//        isZero = 1;
//    else
//        isZero = 0;
//    negative =  unsigned_result & 0x80000000L >>> 31;
//    flags =  (negative<<3) + (isZero<<2) + (carry_out<<1) + overflow;
//    CodePart & part = cs.append(CodePart::OPTIONALMIDDLE);
//    part.getRegisterDependencies().add(registerName [m],32);
//    part.getRegisterDependencies().add(registerName [n],32);
//    part.getAffectedRegisters().add(registerName [d],32);
//
//
////    part.code() = std::string( "((ARMv6M*)cpu)->R[") + toString(d) + "]= ((ARMv6M*)cpu)->R[" + toString(m) + "] + ((ARMv6M*)cpu)->R[" + toString(n) + "];";
//
//    //---------------------------------------------------------------------------------part------------------- what the instruction do
//
//
//    CodePart & part2 = cs.append(CodePart::APPENDEDOPTIONAL); // add a code container
//     if ( d == 15)
//    {
//        CodePart & part2 = cs.append(CodePart::APPENDEDOPTIONAL);
//        part2.getAffectedRegisters().add("instructionPointer",32);
//        part2.code() = "cpu->instructionPointer = "+ unsigned_result;
//        ic.force_block_end_ = true ;
//
//    }
//
//
//    else
//    {
//        part.code() = std::string( "((ARMv6M*)cpu)->R[") + toString(d) + "]= "+ unsigned_result + ";";
//        part.code() = std::string( "((ARMv6M*)cpu)-> APSR = ( ((ARMv6M*)cpu)-> APSR & 0x0FFFFFFFL ) |" + (flags<<28) + ";";
//        CodePart & part2 = cs.append(CodePart::APPENDEDOPTIONAL); // add a code container
//        part2.getAffectedRegisters().add("instructionPointer",32);
//        part2.code() = "cpu->instructionPointer = " +toString((uint32_t)(ic.current_address_+2))+"ULL;";
//
//    }
//
///*
//    -------------------------------------------------part2------------------------------------------ incrementing the instruction pointer
//
//    part2.getAffectedRegisters().add("instructionPointer",32); // predefined in the cpu architecture
//
//    part2.code() =            "cpu->instructionPointer = "           +           toString((uint32_t)(ic.current_address_+4))               +               "ULL;"     ;
//*/
//    return true;
//
//},
//0, // see etiss::instr::Instruction::BUILTINGROUP for possible value and meaning
//0 // callback routing to enable printing of assembler output. optional
//);


void ARMv6MArch::initInstrSet(etiss::instr::ModedInstructionSet & mis) const
{

    {
        etiss::instr::ModedInstructionSet iset("ARMv6M");
        bool ok = true;
        CortexM0.addTo(iset,ok);

        iset.compile();

        std::cout << iset.print() << std::endl;
    }

    bool ok = true;
    CortexM0.addTo(mis,ok);
    if (!ok)
        etiss::log(etiss::FATALERROR,"Failed to add instructions for CoretxXX");

    etiss::instr::VariableInstructionSet * vis = mis.get(1);
    //check if 0
    vis->length_updater_ = [](VariableInstructionSet &,InstructionContext & ic, BitArray & ba)
    {
        if (ba.byteCount() == 4)
        {
            return;
        }
        else if (ba.byteCount() == 2)
        {
            BitArrayRange op(15,13);
            if (op.read(ba) == 7){
                ic.is_not_default_width_ = true;
                ic.instr_width_ = 32;
                ic.instr_width_fully_evaluated_ = true;
            } else {
                ic.is_not_default_width_ = false;
            }
        }
        else
        {
            etiss::log(etiss::FATALERROR,"Invalid data passed to ARMv6M architecture");
        }

    };
}



void ARMv6MArch::compensateEndianess(ETISS_CPU * cpu,etiss::instr::BitArray & ba) const
{
    void * ptr = ba.internalBuffer();
    if (ba.byteCount() == 2)
    {
        *((uint32_t*)ptr) = ((uint16_t)(*((uint8_t*)ptr))) | ((uint16_t)(*(((uint8_t*)ptr)+1)) << 8);
    }
    else if (ba.byteCount() == 4)
    {
        *((uint32_t*)ptr) = ((((uint32_t)(*((uint8_t*)ptr))) | ((uint32_t)(*(((uint8_t*)ptr)+1)) << 8)) << 16) | ((uint32_t)(*(((uint8_t*)ptr)+2)) ) | ((uint32_t)(*(((uint8_t*)ptr)+3)) << 8);
    }
    else
    {
        etiss::log(etiss::FATALERROR,"Endianess cannot be handled",ba.byteCount());
    }
}

