#include "etiss/Plugin.h"
#include "etiss/CPUCore.h"
#include "etiss/interfaces/Wishbone.h"

#include <iomanip>

class Vor1200mp_nofeatures;

namespace etiss
{



namespace verilator
{


class OR1KVCPU : public etiss::CoroutinePlugin, public etiss::InterruptListenerPlugin
{
public:
    OR1KVCPU();
    virtual ~OR1KVCPU();
    virtual int32_t execute();
protected:
    inline std::string _getPluginName() const
    {
        return "OR1KVCPUO";
    }
private:
    void cycle();
    Vor1200mp_nofeatures * vcore;
    etiss::interfaces::WishboneSignalMap<uint8_t,uint32_t > * dataBusSig;
    etiss::interfaces::WishboneSignalMap<uint8_t,uint32_t > * instrBusSig;
    etiss::interfaces::WishboneBus<uint8_t,uint32_t,false,true,4,uint32_t> * dataBus;
    etiss::interfaces::WishboneBus<uint8_t,uint32_t,true,true,4,uint32_t> * instrBus;
    virtual bool interruptWrite(unsigned bit,bool value);
    bool cpu_reset_;
};

} // verilator

} // etiss
